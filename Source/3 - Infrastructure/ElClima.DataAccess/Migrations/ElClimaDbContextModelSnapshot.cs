// <auto-generated />
using System;
using ElClima.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElClima.DataAccess.Migrations
{
    [DbContext(typeof(ElClimaDbContext))]
    partial class ElClimaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElClima.DataAccess.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.Barrio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("departamentoId");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.HasIndex("departamentoId");

                    b.ToTable("Barrio","Comun");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.Departamento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("provinciaId");

                    b.HasKey("id");

                    b.HasIndex("provinciaId");

                    b.ToTable("Departamento","Comun");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.Provincia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("Provincia","Comun");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.Sexo", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("Sexo","Comun");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.TipoVehiculo", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("TipoVehiculo","Comun");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("direccion");

                    b.Property<string>("latitud");

                    b.Property<string>("longitud");

                    b.HasKey("id");

                    b.ToTable("Ubicacion");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ComentarioProducto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("imagen1")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen2")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen3")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("personaId");

                    b.Property<int>("productoId");

                    b.Property<int>("tipoComentarioId");

                    b.HasKey("id");

                    b.HasIndex("personaId");

                    b.HasIndex("productoId");

                    b.HasIndex("tipoComentarioId");

                    b.ToTable("ComentarioProducto","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ComentarioServicio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("imagen1")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen2")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen3")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("personaId");

                    b.Property<int>("servicioId");

                    b.Property<int>("tipoComentarioId");

                    b.HasKey("id");

                    b.HasIndex("personaId");

                    b.HasIndex("servicioId");

                    b.HasIndex("tipoComentarioId");

                    b.ToTable("ComentarioServicio","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ConversacionComentarioProducto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("comentarioProductoId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("imagen1")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen2")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen3")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("comentarioProductoId");

                    b.HasIndex("personaId");

                    b.ToTable("ConversacionComentarioProducto","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ConversacionComentarioServicio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("comentarioServicioId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("imagen1")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen2")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("imagen3")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("comentarioServicioId");

                    b.HasIndex("personaId");

                    b.ToTable("ConversacionComentarioServicio","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.DiaHorarioDisponible", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("diaId");

                    b.Property<int>("entidadId");

                    b.Property<string>("horaDesde")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("horaDesdeSegundoTurno")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("horaHasta")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("horaHastaSegundoTurno")
                        .HasColumnType("varchar(10)");

                    b.HasKey("id");

                    b.HasIndex("diaId");

                    b.HasIndex("entidadId");

                    b.ToTable("DiaHorarioDisponible","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.DiaSemana", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("DiaSemana","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.Entidad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("creadorId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<string>("observacion")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("responsableId");

                    b.Property<int>("tipoEntidadId");

                    b.Property<int>("ubicacionId");

                    b.HasKey("id");

                    b.HasIndex("creadorId");

                    b.HasIndex("responsableId");

                    b.HasIndex("tipoEntidadId");

                    b.HasIndex("ubicacionId");

                    b.ToTable("Entidad","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.LineaProducto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion");

                    b.Property<DateTime>("fechaHoraCreacion");

                    b.Property<DateTime>("fechaHoraUltimaActualizacion");

                    b.Property<string>("observacion");

                    b.Property<int>("servicioId");

                    b.HasKey("id");

                    b.HasIndex("servicioId");

                    b.ToTable("LineaProducto");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.Producto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<bool>("disponible");

                    b.Property<DateTime>("fechaHoraCrecion")
                        .HasColumnType("Date");

                    b.Property<DateTime>("fechaHoraUltimaActualizacion")
                        .HasColumnType("Date");

                    b.Property<int>("lineaProductoId");

                    b.Property<decimal>("precio")
                        .HasColumnType("money");

                    b.HasKey("id");

                    b.HasIndex("lineaProductoId");

                    b.ToTable("Producto","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ProductoImagen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("fechaHoraSubida")
                        .HasColumnType("Date");

                    b.Property<string>("imagen")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("productoId");

                    b.HasKey("id");

                    b.HasIndex("productoId");

                    b.ToTable("ProductoImagen","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.Servicio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<int>("entidadId");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<DateTime>("fechaHoraUltimaActualizacion")
                        .HasColumnType("Date");

                    b.Property<string>("foto")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("observacion")
                        .HasColumnType("varchar(400)");

                    b.Property<int>("tipoServicioId");

                    b.HasKey("id");

                    b.HasIndex("entidadId");

                    b.HasIndex("tipoServicioId");

                    b.ToTable("LineaProducto","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ServicioImagen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("fechaHoraSubida")
                        .HasColumnType("Date");

                    b.Property<string>("imagen")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("servicioId");

                    b.HasKey("id");

                    b.HasIndex("servicioId");

                    b.ToTable("ServicioImagen","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.TipoComentario", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("TipoComentario","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.TipoEntidad", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("TipoEntidad","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.TipoServicio", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.ToTable("TipoServicio","Entidad");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.Comentario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraCreado")
                        .HasColumnType("Date");

                    b.Property<int>("historiaId");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("historiaId");

                    b.HasIndex("personaId");

                    b.ToTable("Comentario","Reporte.Historia");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.ComentarioImagen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraCreada");

                    b.Property<DateTime>("fechaHoraCreado")
                        .HasColumnType("Date");

                    b.Property<int>("imagenId");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("imagenId");

                    b.HasIndex("personaId");

                    b.ToTable("ComentarioImagen","Reporte.Historia");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.Conversacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("comentarioId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraCreado")
                        .HasColumnType("Date");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("comentarioId");

                    b.HasIndex("personaId");

                    b.ToTable("Conversacion","Reporte.Historia");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.Historia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("aportarImagen");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechHoraCreada")
                        .HasColumnType("Date");

                    b.Property<int>("personaId");

                    b.Property<int>("ubicacionId");

                    b.HasKey("id");

                    b.HasIndex("personaId");

                    b.HasIndex("ubicacionId");

                    b.ToTable("Historia","Reporte.Historia");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.ImagenHistoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("aportada");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraSubida")
                        .HasColumnType("Date");

                    b.Property<int>("historiaId");

                    b.Property<string>("imagen")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("historiaId");

                    b.HasIndex("personaId");

                    b.ToTable("ImagenHistoria","Reporte.Historia");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Comentario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("comentario")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<int>("perdidaId");

                    b.Property<int>("personaId");

                    b.Property<int>("ubicacionId");

                    b.HasKey("id");

                    b.HasIndex("perdidaId");

                    b.HasIndex("personaId");

                    b.HasIndex("ubicacionId");

                    b.ToTable("Comentario","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.ComentarioImagen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("comentarioId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraSubida")
                        .HasColumnType("Date");

                    b.HasKey("id");

                    b.HasIndex("comentarioId");

                    b.ToTable("ImagenComentario","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Conversacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("comentarioId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("comentarioId");

                    b.HasIndex("personaId");

                    b.ToTable("Conversacion","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.ConversacionImagen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("conversacionId");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("fechaHoraSubida")
                        .HasColumnType("Date");

                    b.HasKey("id");

                    b.HasIndex("conversacionId");

                    b.ToTable("ImagenConversacion","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.ImagenPerdida", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fechaHoraSubida")
                        .HasColumnType("Date");

                    b.Property<string>("imagen")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("perdidaId");

                    b.HasKey("id");

                    b.HasIndex("perdidaId");

                    b.ToTable("ImagenPerdida","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Perdida", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("encontrado");

                    b.Property<DateTime>("fechaHoraCreada")
                        .HasColumnType("Date");

                    b.Property<DateTime>("fechaHoraPerdida")
                        .HasColumnType("Date");

                    b.Property<string>("informacionUtil")
                        .HasColumnType("varchar(400)");

                    b.Property<int>("personaId");

                    b.HasKey("id");

                    b.HasIndex("personaId");

                    b.ToTable("Perdida","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.UbicacionPerdida", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("imagen")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("observacion")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("perdidaId");

                    b.Property<int>("ubicacionPerdidaId");

                    b.HasKey("id");

                    b.HasIndex("perdidaId");

                    b.HasIndex("ubicacionPerdidaId");

                    b.ToTable("UbicacionPerdida","Reporte.Perdida");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Sujetos.Domicilio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("barrioId");

                    b.Property<string>("calle")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("departamentoId");

                    b.Property<DateTime>("fechaHoraCreacion")
                        .HasColumnType("Date");

                    b.Property<DateTime>("fechaHoraUltimaActualizacion")
                        .HasColumnType("Date");

                    b.Property<int>("numero")
                        .HasMaxLength(5);

                    b.Property<string>("numeroDepartamento")
                        .HasColumnType("varchar(8)");

                    b.Property<int>("personaId");

                    b.Property<int>("piso")
                        .HasMaxLength(3);

                    b.Property<int>("provinciaId");

                    b.Property<int>("ubicacionId");

                    b.HasKey("id");

                    b.HasIndex("barrioId");

                    b.HasIndex("departamentoId");

                    b.HasIndex("personaId");

                    b.HasIndex("provinciaId");

                    b.HasIndex("ubicacionId");

                    b.ToTable("Domicilio","Sujeto");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Sujetos.Persona", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("dni")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("fechaNacimiento")
                        .HasColumnType("Date");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<int>("sexoId");

                    b.Property<int>("ubicacionId");

                    b.HasKey("id");

                    b.HasIndex("sexoId");

                    b.HasIndex("ubicacionId");

                    b.ToTable("Persona","Sujeto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.Barrio", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Comun.Departamento", "departamento")
                        .WithMany()
                        .HasForeignKey("departamentoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Comun.Departamento", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Comun.Provincia", "provincia")
                        .WithMany()
                        .HasForeignKey("provinciaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ComentarioProducto", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Producto", "producto")
                        .WithMany()
                        .HasForeignKey("productoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.TipoComentario", "tipoComentario")
                        .WithMany()
                        .HasForeignKey("tipoComentarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ComentarioServicio", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Servicio", "servicio")
                        .WithMany()
                        .HasForeignKey("servicioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.TipoComentario", "tipoComentario")
                        .WithMany()
                        .HasForeignKey("tipoComentarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ConversacionComentarioProducto", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.ComentarioProducto", "comentario")
                        .WithMany()
                        .HasForeignKey("comentarioProductoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ConversacionComentarioServicio", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.ComentarioServicio", "comentario")
                        .WithMany()
                        .HasForeignKey("comentarioServicioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.DiaHorarioDisponible", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.DiaSemana", "dia")
                        .WithMany()
                        .HasForeignKey("diaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Entidad", "entidad")
                        .WithMany()
                        .HasForeignKey("entidadId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.Entidad", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "creador")
                        .WithMany()
                        .HasForeignKey("creadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "responsable")
                        .WithMany()
                        .HasForeignKey("responsableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.TipoEntidad", "tipoEntidad")
                        .WithMany()
                        .HasForeignKey("tipoEntidadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", "ubicacion")
                        .WithMany()
                        .HasForeignKey("ubicacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.LineaProducto", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Servicio", "servicio")
                        .WithMany()
                        .HasForeignKey("servicioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.Producto", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.LineaProducto", "lineaProducto")
                        .WithMany()
                        .HasForeignKey("lineaProductoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ProductoImagen", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Producto", "producto")
                        .WithMany()
                        .HasForeignKey("productoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.Servicio", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Entidad", "entidad")
                        .WithMany()
                        .HasForeignKey("entidadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.TipoServicio", "tipoServicio")
                        .WithMany()
                        .HasForeignKey("tipoServicioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Entidades.ServicioImagen", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Entidades.Servicio", "servicio")
                        .WithMany()
                        .HasForeignKey("servicioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.Comentario", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Historia.Historia", "historia")
                        .WithMany()
                        .HasForeignKey("historiaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.ComentarioImagen", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Historia.ImagenHistoria", "imagen")
                        .WithMany()
                        .HasForeignKey("imagenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.Conversacion", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Historia.Comentario", "comentario")
                        .WithMany()
                        .HasForeignKey("comentarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.Historia", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", "ubicacion")
                        .WithMany()
                        .HasForeignKey("ubicacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Historia.ImagenHistoria", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Historia.Historia", "historia")
                        .WithMany()
                        .HasForeignKey("historiaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Comentario", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Perdida", "perdida")
                        .WithMany()
                        .HasForeignKey("perdidaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", "ubicacion")
                        .WithMany()
                        .HasForeignKey("ubicacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.ComentarioImagen", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Comentario", "comentario")
                        .WithMany()
                        .HasForeignKey("comentarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Conversacion", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Comentario", "comentario")
                        .WithMany()
                        .HasForeignKey("comentarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.ConversacionImagen", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Conversacion", "conversacion")
                        .WithMany()
                        .HasForeignKey("conversacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.ImagenPerdida", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Perdida", "perdida")
                        .WithMany()
                        .HasForeignKey("perdidaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Perdida", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Reporte.Perdida.UbicacionPerdida", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Social.Reporte.Perdida.Perdida", "perdida")
                        .WithMany()
                        .HasForeignKey("perdidaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", "ubicacionPerdida")
                        .WithMany()
                        .HasForeignKey("ubicacionPerdidaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Sujetos.Domicilio", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Comun.Barrio", "barrio")
                        .WithMany()
                        .HasForeignKey("barrioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Comun.Departamento", "departamento")
                        .WithMany()
                        .HasForeignKey("departamentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Social.Sujetos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Comun.Provincia", "provincia")
                        .WithMany()
                        .HasForeignKey("provinciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", "ubicacionActual")
                        .WithMany()
                        .HasForeignKey("ubicacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ElClima.Domain.Model.Models.Social.Sujetos.Persona", b =>
                {
                    b.HasOne("ElClima.Domain.Model.Models.Comun.Sexo", "sexo")
                        .WithMany()
                        .HasForeignKey("sexoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.Domain.Model.Models.Posicionamiento.Ubicacion", "ubicacionActual")
                        .WithMany()
                        .HasForeignKey("ubicacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ElClima.DataAccess.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ElClima.DataAccess.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElClima.DataAccess.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ElClima.DataAccess.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
